#!/usr/bin/env bash

# Developed under Funtoo Linux with POSIX portability in mind.
# It aims to be usable on about any modern Unix distro, once dependencies are installed.
# Perhaps even Windows 10' Windows Subsystem for Linux (aka. WSL)

# WHAT YOU NEED:
# aria2 - https://aria2.github.io (for ${DOWNLOADS})
# 7z - https://www.7-zip.org (for archive manipulations)
# python3 - its 2021. time to update python2 to 3.
# GNU coreutils - sha256sum
# GNU parallel - modern systems have multiple CPUs, so use them
# Shopping spree - search for the "Purchase" word in this file to find what/where to buy.

# Optionally, if you have AmiKit and Roadshow in the "commercial" archives directory,
# this will also move them on SD1.

# TODO:
# - receive arguments from command line as options
# - integrate other commercial software described in v4bl instructions
# - integrate special folders described by v4bl instructions for games, documents, etc.
# - sha256 checks of files downloaded with aria2 and commercial files

# Uncomment for debugging
#set -x

VERSION="2.6.1alpha"

function preflight_check() {
    echo >&2 -e "\nChecking required utilities..."
    dependencies=(aria2c 7z fs-uae parallel)

    for cmd in "${dependencies[@]}"
    do
      if ! command -v "${cmd}" &> /dev/null
      then
          echo >&2 "Pre-flight ABORTED: ${cmd} could not be found."
          exit 1
      fi
      echo >&2 "Pre-flight check, executable: ${cmd} - nominal."
      # do something on $var
    done

    # parallel has a nagging banner. This is not academic research work.
    mkdir -p "${HOME}/.parallel"
    touch "${HOME}/.parallel/will-cite"

    echo "Looks good!"
}

function preflight_python() {
    echo -e >&2 "\nChecking python environment and gdown for Google Drive download..."
    python3 -m venv venv
    USER_PYTHON_BIN_DIR=$(readlink -f venv/bin)
    source "${USER_PYTHON_BIN_DIR}/activate"
    pip install --user -r ./requirements.txt || \
        { echo >&2 'Pre-flight ABORTED: gdown could not be installed.'; deactivate; exit 1; }
    deactivate
    echo >&2 "Pre-flight check, executable: gdown - nomimal."
}

function query_card_size() {
    read -r -p "Enter your work/CF card size: 32, 64, (128) or 256 [Enter for default 128]:" CF_CARD_SIZE
    CF_CARD_SIZE=${CF_CARD_SIZE:-128}
}

function query_work_dir() {
    NEW_WORK=$(mktemp -d -t -u v4bl_work.XXXX)
    echo >&2 "IMPORTANT: for proper sandboxing and predictability, v4bl_o_matic **clears** the work directory between runs."
    echo >&2 "It is highly recommended you stick with the defaults, which creates a new temporary directory."
    read -r -p "Specify work directory [Enter for default, from mktemp: ${NEW_WORK}]:" WORK
    WORK=${WORK:-${NEW_WORK}}
}

function query_commercial_dir() {
    if ! command -v "xdg-user-dir" &> /dev/null
    then
        DEFAULT_COMMERCIAL="${HOME}/Downloads"
    else
        DEFAULT_COMMERCIAL="$(xdg-user-dir DOWNLOAD)"
    fi

    read -r -p "Specify directory with commercial packages (Amiga Forever, Amikit, Roadshow, etc.) [Enter for default: ${DEFAULT_COMMERCIAL}]:" COMMERCIAL
    COMMERCIAL=${COMMERCIAL:-${DEFAULT_COMMERCIAL}}
}

function query_downloads_dir() {
    if ! command -v "xdg-user-dir" &> /dev/null
    then
        DEFAULT_DOWNLOADS="${HOME}/Downloads/v4bl"
    else
        DEFAULT_DOWNLOADS="$(xdg-user-dir DOWNLOAD)/v4bl"
    fi
    read -r -p "Specify directory where to download v4bl_o_matic files [Enter for default: ${DEFAULT_DOWNLOADS}]:" DOWNLOADS
    DOWNLOADS=${DOWNLOADS:-${DEFAULT_DOWNLOADS}}
}

function prepare_workspace() {
    echo >&2 -e "\nWork directory ${WORK} will be destroyed in 5 seconds. Ctrl-C to abort."
    sleep 5
    rm --recursive --verbose --force "${WORK}"  >/dev/null 2>&1
    mkdir --parents --verbose "${WORK}" "${DOWNLOADS}"
}

function download_dependencies() {
    echo >&2 -e "\nDownloading required files, including coffin torrent, unless already present in ${DOWNLOADS} directory..."
    echo >&2 "Required time depends on various factors including, but not limited to, bandwidth."

    tee "${WORK}/download.manifest" <<EOF >/dev/null
    magnet:?xt=urn:btih:9c5d1a5e3bc609c7c8691555af7a1632d99aab1d&dn=coffin%5Fr58%5F32GB.7z&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A6969
    https://archive.org/download/amiga-os-3.9/AmigaOS3.9.iso
    http://www.haage-partner.net/download/AmigaOS/BoingBag39-1.lha
    http://www.haage-partner.net/download/AmigaOS/BB3.9-2.lha
    http://amigan.1emu.net/releases/BoingBags3&4.lha
EOF

    aria2c \
        -i "${WORK}/download.manifest" \
        --console-log-level=error \
        --remote-time \
        --max-connection-per-server=5 \
        --continue \
        --check-integrity \
        --dir="${DOWNLOADS}" \
        --seed-time=0 \
        --summary-interval=0 &

    aria2c_pid=$!

    # Sets parallel_pid
    download_v4bl_google

    wait ${aria2c_pid} ${parallel_pid}
}

# TODO: append v4bl link upon 128 selection. Adjust for other sizes
function download_v4bl_google() {
    find "sha256" \
        -maxdepth 1 \
        -type f \
        -iname "V4BL*sha256" \
        | xargs cp --verbose --update --target-directory="${DOWNLOADS}"

    source "${USER_PYTHON_BIN_DIR}/activate"
    GDOWN_DIR=${USER_PYTHON_BIN_DIR}
    cd "${DOWNLOADS}"

    gdrive_ids=(\
        1tdzYRWy07NZL1o8t3O25tE7TPjkdCbSN \
        1itPogEvfndft9ASB7lNdMbNtbigkAdUD \
        1vRz-wVCwep5VFp1UkEerTAvdFM4jFBvj \
        10psTBzzct5IpNiurAcfs_t9pYl9pjAjD \
    )

    real_name=(\
        V4BL-SD-Card-1-Install.zip \
        V4BL-SD-Card-2-ApollOS.img.zip \
        V4BL-SD-Card-4-EmuTOS.img.zip \
        V4BL-128G-CF-Card.img.zip \
    )

    mkdir -p "${HOME}/.parallel"
    touch "${HOME}/.parallel/will-cite"
    parallel \
        --will-cite \
        --link \
        --verbose \
        "sha256sum --check \"{2}.sha256\" || \
            (python \"${GDOWN_DIR}/gdown\" \"https://drive.google.com/uc?id={1}\" && sha256sum --check \"{2}.sha256\")" \
            ::: "${gdrive_ids[@]}" \
            ::: "${real_name[@]}" &

    parallel_pid=$!

    deactivate
    >/dev/null 2>&1 cd -
}

function extract_archives() {
    echo -e >&2 "\nExtracting required archives..."
    echo >&2 "Required time depends on various factors including, but not limited to, IOPS."

    archives=(\
        "${COMMERCIAL}/AmigaForever8Plus.zip" \
        "${DOWNLOADS}/V4BL-${CF_CARD_SIZE}G-CF-Card.img.zip" \
        "${DOWNLOADS}/V4BL-SD-Card-1-Install.zip" \
        "${DOWNLOADS}/V4BL-SD-Card-2-ApollOS.img.zip" \
        "${DOWNLOADS}/coffin_r58_32GB.7z" \
        "${DOWNLOADS}/V4BL-SD-Card-4-EmuTOS.img.zip" \
    )

    directories=(\
        AmigaForever \
        CF \
        SD1 \
        SD2 \
        SD3 \
        SD4 \
    )

    parallel \
        --will-cite \
        --link \
        --verbose \
        "mkdir -p \"${WORK}/{2}\" && 7z x {1} -aos -o\"${WORK}/{2}\"" \
            ::: "${archives[@]}" \
            ::: "${directories[@]}"
}

echo -e "V4BL-O-Matic ${VERSION}"

# Guards

# Python3 environment required.
preflight_python
# Aria2, 7z, parallel required.
preflight_check

# Interactive
echo -e "\nHit ENTER to select defaults values (in parentheses)."
query_card_size
query_work_dir
query_commercial_dir
query_downloads_dir

# Wheeeeeeeeeeeee....
#prepare_workspace

# Download in background, using all cores and bandwidth it can take.
download_dependencies

# Download in background, using all cores and IOPS it can take.
extract_archives

# All set. Proceed with the patchwork!

# AmigaOS 1.3.3
7z e "${WORK}/AmigaForever/af-dvd.iso" \
    -aos \
    '-i!Amiga Files/Shared/adf/amiga-os-134-*.adf' \
    '-i!Amiga Files/Shared/rom/amiga-os-130.rom' \
    -o"${WORK}/SD1/AOS133"

# AmigaOS 3.1
# Note: rom file is copied later.
7z e "${WORK}/AmigaForever/af-dvd.iso" \
    -aos \
    '-i!Amiga Files/Shared/adf/amiga-os-310-*.adf' \
    '-i!Amiga Files/Shared/rom/amiga-os-310-a1200.rom' \
    -o"${WORK}/SD1/AOS31"

# AmigaOS 3.1.9 (3.2)
# Purchase AmigaOS from Hyperion
# https://www.hyperion-entertainment.com/index.php/where-to-buy/direct-${DOWNLOADS}/188-amigaos-314
# Note: rom file is copied later.
find -H "${COMMERCIAL}" \
    -maxdepth 1 \
    -type f \
    -iname "AmigaOS-3.1.4.1-Update.zip" -o \
    -iname "AmigaOS-3.1.4-A1200.zip" \
    | xargs cp --verbose --update --target-directory="${WORK}/SD1/AOS32"

# AmigaOS 3.9
# Can be found on Internet Archive at this time.
# Note: rom file is copied later, see below.

find -H "${DOWNLOADS}" \
    -maxdepth 1 \
    -type f \
    -iname "AmigaOS3.9.iso" -o \
    -iname "BoingBag39-1.lha" -o \
    -iname "BB3.9-2.lha" -o \
    -iname "BoingBags3&4.lha" \
    | xargs cp --verbose --update --target-directory="${WORK}/SD1/AOS39"

# Slight names adjustments.
mv --verbose "${WORK}/SD1/AOS39/AmigaOS3.9.iso" "${WORK}/SD1/AOS39/AmigaOS39.iso"
mv --verbose "${WORK}/SD1/AOS39/BB3.9-2.lha" "${WORK}/SD1/AOS39/BoingBag39-2.lha"

# AmigaOS ROM 3.0 for all AOS3x.
find -H "${WORK}/SD1" \
    -maxdepth 1 \
    -type d \
    -iname "AOS32" -o -iname "AOS39" \
    -exec cp --verbose --update "${WORK}/SD1/AOS31/amiga-os-310-a1200.rom" {} \;

# AmiKit
# Purchase from Ján Zahurančík website - https://www.amikit.amiga.sk/vampire
if [ -f "${COMMERCIAL}/amikitxe-vampire.lzx" ]; then
    cp --verbose --update "${COMMERCIAL}/amikitxe-vampire.lzx" "${WORK}/SD1/AmiKIT"
else
    echo >&2 -e 'Optional: AmiKIT is missing. Skipped.'
fi

# Roadshow
# Purchase from APC&TCP - http://roadshow.apc-tcp.de/index-en.php
if [ -f "${COMMERCIAL}/Roadshow.lha" ]; then
    cp --verbose --update "${COMMERCIAL}/Roadshow.lha" "${WORK}/SD1/Install"
else
    echo >&2 -e 'Optional: Roadshow is missing. Skipped.'
fi

WORK=/home/francois/v4bl_work
find -H "${WORK}/SD1" \
    -maxdepth 1 \
    -type d \
    -iname "AOS*" -o \
    -iname "Install" \
    -fprint "${WORK}/chmod_dirs"

xargs -I '[]' -a "${WORK}/chmod_dirs" find '[]' -maxdepth 1 -type f -exec chmod --verbose 644 {} \;
echo >&2 "CHECKPOINT! SD1 preparation complete! You can proceed with next level, fsuae_o_matic!"
exit 0

